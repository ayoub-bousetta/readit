{"version":3,"sources":["logo.png","reducers/BookReducer.js","context/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BookReducer","state","action","type","title","book","author","id","uuid","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","NavBar","useContext","className","length","BookDetails","onClick","BookList","map","key","BookForm","useState","settitle","setauthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,mNCC9BC,EAAc,SAACC,EAAMC,GAGlC,OAAQA,EAAOC,MACX,IAAK,YACD,MAAM,GAAN,mBAAUF,GAAV,CAAgB,CACZG,MAAOF,EAAOG,KAAKD,MACnBE,OAAQJ,EAAOG,KAAKC,OACpBC,GAAGC,SAIX,IAAK,cACD,OAAOP,EAAMQ,OAAO,SAAAJ,GAAI,OAAGA,EAAKE,KAAOL,EAAOK,KAGlD,QACA,OAAON,ICfES,EAAaC,0BA8BXC,EA5BY,SAACC,GAAS,IAAD,EAENC,qBAAWd,EAAY,GAAG,WAChD,IAAMe,EAAYC,aAAaC,QAAQ,SACxC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAc,KAJf,mBAEzBK,EAFyB,KAElBC,EAFkB,KAmBhC,OAbAC,oBAAU,WACPN,aAAaO,QAAQ,QAAQL,KAAKM,UAAUJ,KAC5C,CAACA,IAYR,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAACN,QAAMC,aACnCR,EAAMc,WCXQC,EAXD,WAAK,IAERR,EAASS,qBAAWnB,GAApBU,MAEP,OACI,yBAAKU,UAAU,UACP,0CACA,sDAA4BV,EAAMW,OAAlC,cCIDC,EAXK,SAAC,GAAY,IAAX3B,EAAU,EAAVA,KACXgB,EAAWQ,qBAAWnB,GAAtBW,SACP,OAEI,wBAAIY,QAAU,kBAAIZ,EAAS,CAAClB,KAAK,cAAcI,GAAGF,EAAKE,OACnD,yBAAKuB,UAAU,SAASzB,EAAKD,OAC7B,yBAAK0B,UAAU,UAAUzB,EAAKC,UCa3B4B,EAnBE,WAAO,IACbd,EAASS,qBAAWnB,GAApBU,MACP,OAAOA,EAAMW,OACT,yBAAKD,UAAU,YACX,4BAEQV,EAAMe,IAAI,SAAA9B,GACN,OAAQ,kBAAC,EAAD,CAAaA,KAAMA,EAAM+B,IAAK/B,EAAKE,SAQ1D,yBAAKuB,UAAU,WCMTO,EAtBE,WAAO,IAEdhB,EAAWQ,qBAAWnB,GAAtBW,SAFa,EAGOiB,mBAAS,IAHhB,mBAGZlC,EAHY,KAGLmC,EAHK,OAISD,mBAAS,IAJlB,mBAIZhC,EAJY,KAIJkC,EAJI,KAYnB,OACI,0BAAMC,SAPO,SAACC,GACdA,EAAEC,iBACFtB,EAAS,CAAClB,KAAK,YAAYE,KAAK,CAACD,QAAME,YACvCkC,EAAU,IAClBD,EAAS,MAIT,2BAAOpC,KAAK,OAAOyC,YAAY,aAAalB,MAAOtB,EAAOyC,SAAU,SAACH,GAAD,OAAKH,EAASG,EAAEI,OAAOpB,QAAQqB,UAAQ,IAC3G,2BAAO5C,KAAK,OAAOyC,YAAY,aAAalB,MAAOpB,EAAQuC,SAAU,SAACH,GAAD,OAAKF,EAAUE,EAAEI,OAAOpB,QAAQqB,UAAQ,IAC7G,2BAAO5C,KAAK,SAASuB,MAAM,eCGZsB,MAbf,WACE,OACE,yBAAKlB,UAAU,OACX,yBAAKmB,IAAKC,IAAMC,IAAI,aACpB,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7c1269bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bb20d3cd.png\";","import uuid from 'uuid/v1'\r\nexport const BookReducer = (state,action)=>{\r\n\r\n\r\nswitch (action.type) {\r\n    case \"ADD_BOOKS\":\r\n        return[...state,{\r\n            title: action.book.title,\r\n            author: action.book.author,\r\n            id:uuid()\r\n        }]\r\n        break;\r\n\r\n    case \"Delete_BOOK\":\r\n        return state.filter(book=> book.id !== action.id)\r\n    break;\r\n\r\n    default:\r\n    return state\r\n        break;\r\n}\r\n}","import React,{createContext,useReducer,useEffect} from 'react'\r\nimport { BookReducer } from '../reducers/BookReducer';\r\n\r\nexport const BookContext =createContext();\r\n\r\nconst BookContextProvider =(props)=>{\r\n\r\n    const [books, dispatch] = useReducer(BookReducer,[],()=>{\r\n        const localData = localStorage.getItem('books');\r\n       return localData ? JSON.parse(localData) :  []\r\n    })\r\n    useEffect(() => {\r\n       localStorage.setItem('books',JSON.stringify(books))\r\n    }, [books])\r\n\r\n    // const AddBooks=(title,author)=>{\r\n    //     setbooks([...books,{title:title,author:author,id:uuid()}])\r\n    // }\r\n\r\n    // const DeleteBooks=(id)=>{\r\n    //     setbooks(books.filter(book=> book.id !== id\r\n    //     ))\r\n    //}\r\n\r\n    return (\r\n<BookContext.Provider value={{books,dispatch}}>\r\n{props.children}\r\n</BookContext.Provider>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default BookContextProvider;","import React,{createContext,useContext} from 'react'\r\nimport { BookContext } from '../context/BookContext';\r\n\r\n\r\nconst NavBar =()=>{\r\n\r\n    const {books} = useContext(BookContext)\r\n\r\n    return(\r\n        <div className=\"navabr\">\r\n                <h1>Books List</h1>\r\n                <p>Currently you read like {books.length} Book(s)</p>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar;","import React,{createContext,useContext} from 'react'\r\nimport { BookContext } from '../context/BookContext';\r\n\r\n\r\nconst BookDetails = ({book}) => {\r\n    const {dispatch} =useContext(BookContext)\r\n    return ( \r\n\r\n        <li onClick ={()=>dispatch({type:'Delete_BOOK',id:book.id})}>\r\n            <div className=\"title\">{book.title}</div>\r\n            <div className=\"author\">{book.author}</div>\r\n        </li>\r\n     );\r\n}\r\n \r\nexport default BookDetails;","import React,{createContext,useContext} from 'react'\r\nimport { BookContext } from '../context/BookContext';\r\nimport BookDetails from './BookDetails';\r\n\r\nconst BookList = () => {\r\n    const {books} = useContext(BookContext)\r\n    return books.length ? ( \r\n        <div className=\"booklist\">\r\n            <ul>\r\n                {\r\n                    books.map(book=>{\r\n                        return (<BookDetails book={book} key={book.id} />)\r\n                    })\r\n                }\r\n            </ul>\r\n\r\n        </div>\r\n\r\n     ):(\r\n         <div className='empty'></div>\r\n     );\r\n}\r\n \r\nexport default BookList;","import React,{useContext,useState} from 'react'\r\nimport { BookContext } from '../context/BookContext';\r\n\r\nconst BookForm = () => {\r\n\r\n   const {dispatch} =useContext(BookContext)\r\n    const [title, settitle] = useState('')\r\n    const [author, setauthor] = useState('')\r\n\r\n    const handleSub =(e)=>{\r\n        e.preventDefault();\r\n        dispatch({type:'ADD_BOOKS',book:{title,author}})\r\n        setauthor('')\r\nsettitle('')\r\n    }\r\n    return (\r\n        <form onSubmit={handleSub}>\r\n<input type=\"text\" placeholder='Book Title' value={title} onChange={(e)=>settitle(e.target.value)} required/>\r\n<input type=\"text\" placeholder='Written by' value={author} onChange={(e)=>setauthor(e.target.value)} required/>\r\n<input type=\"submit\" value=\"Add Book\"/>\r\n        </form>\r\n    \r\n    );\r\n}\r\n \r\nexport default BookForm;","import React from 'react';\nimport logo from './logo.png';\nimport './App.scss';\nimport BookContextProvider from './context/BookContext';\nimport NavBar from './components/Navbar';\nimport BookList from './components/BookList';\nimport BookForm from './components/BookForm';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <img src={logo} alt=\"Logo App\"/>\n        <BookContextProvider>\n          <NavBar />\n          <BookList />\n          <BookForm />\n          </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}